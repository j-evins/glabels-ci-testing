# This workflow tests building gLabels on multiple platforms
#
#     - ubuntu-latest  - gcc
#     - ubuntu-latest  - clang
#     - ubuntu-20.04   - gcc   (For backwards compatablity)
#     - windows-latest - cl
      

name: gLabels-qt Cross-Platform Build Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest, ubuntu-20.04, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-20.04
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-20.04
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      shell: bash
      run: |
        if [ "${{ matrix.os }}" =~ "ubuntu-.*" ]; then
          # install zint from source, before qt installed
          wget https://downloads.sourceforge.net/project/zint/zint/2.6.5/zint-2.6.5.tar.gz && tar xzf zint-2.6.5.tar.gz && ( cd zint-2.6.5 && mkdir build && cd build && cmake .. && make && sudo make install )
          # install packages
          sudo apt-get update
          sudo apt-get -y install qtbase5-dev libqt5svg5-dev qttools5-dev
          sudo apt-get -y install xvfb
          sudo apt-get -y install pkgconf libqrencode-dev
          sudo apt-get -y install barcode
        #elif [ "${{ matrix.os }}" == "windows-latest" ]; then
        #  choco install <package-name> -y
        fi

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: xvfb-run ctest --build-config ${{ matrix.build_type }}
